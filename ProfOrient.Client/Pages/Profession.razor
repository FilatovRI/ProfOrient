@page "/profession"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using VkNet
@using VkNet.Enums.Filters
@using VkNet.Model
@using System.Net
@using System.Text.RegularExpressions
@using System.Web
@using Newtonsoft.Json
@using RestSharp
@rendermode InteractiveServer

<head>

</head>

<PageTitle>Подбор профессии</PageTitle>

<h1>Подбор профессии</h1>

<div class="container border">
    <h3>Подключение профиля ВКонтакте</h3>
    <label style="font-weight:bold">VK ID</label>
    <div>&nbsp;</div>
    <button @onclick="GetVkId" class="btn btn-success">ВХОД</button> <hr />

    <label style="font-weight:bold">Логин + пароль + код авторизации</label>
    <div>&nbsp;</div>
    <div class="row">
        <div class="col-3">
            <InputText id="vkLogin" class="form-control" placeholder="Логин" @bind-Value="vkLogin"></InputText>
        </div>

        <div class="col-3">
            <InputText id="vkPassword" class="form-control" placeholder="Пароль" @bind-Value="vkPassword"></InputText>
        </div>

        <div class="col-3">
            @* <button @onclick="HandleSubmit" class="btn btn-primary">Получить код</button> *@
            <InputText id="vkCode" class="form-control" placeholder="Код" @bind-Value="vkCode"></InputText>
        </div>
        
        <div class="col-3">
            <button @onclick="HandleSubmit" class="btn btn-success">ВХОД</button>
        </div>
    </div>
    <div>&nbsp;</div>
</div>
<div>&nbsp;</div>
<div style="display:@resumeVisibility">
    <h2>Ваша рекомендация:</h2>
    <div>
        <p style="white-space: pre-line">@resumeValue</p>
    </div>
</div>
<div style="visibility:@errorVisibility">
    <h3>Ошибка:</h3>
    <div>
        <p style="white-space: pre-line; color:red">@errorValue</p>
    </div>
</div>

@* <script type="text/javascript">
    
</script> *@

@code {
    private string accessToken;
    private string vkLogin;
    private string vkPassword;
    private string vkCode;
    private string resumeValue;
    private string resumeVisibility = "none";
    private string errorValue;
    private string errorVisibility = "hidden";

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.Uri;
        Console.WriteLine($"1 '{uri}'");
        Console.WriteLine($"2 '{NavigationManager.BaseUri}'");


        if (uri.Contains("#access_token="))
        {
            Uri uri2 = new Uri(uri);
            string fragment = uri2.Fragment;
            Console.WriteLine($"3 '{fragment}'");

            string[] parameters = fragment.Split('&');

            string access_token = String.Empty;
            foreach (string parameter in parameters)
            {
                if (parameter.StartsWith("#access_token="))
                {
                    access_token = parameter.Substring("#access_token=".Length);
                    accessToken = access_token;
                    break;
                }
            }

            Console.WriteLine($"4 '{access_token}'");
            await HandleSubmit();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"0 firstRender: {firstRender}");
        await JsRuntime.InvokeAsync<string>("console.log", $"02 firstRender: {firstRender}");
    }

    private void GetVkId()
    {
        // redirect_uri=http://localhost/proforient/profession
        string baseUrl = NavigationManager.BaseUri;
        if (!baseUrl.EndsWith("/"))
            baseUrl += "/";
        baseUrl = HttpUtility.UrlEncode(baseUrl);
        NavigationManager.NavigateTo($"https://oauth.vk.com/authorize?client_id=51812270&display=popup&redirect_uri={baseUrl}profession" +
                                     $"&scope=friends,notify,photos,wall,email,mail,groups,stats,offline&response_type=token&v=5.74");
    }

    private async Task HandleSubmit()
    {
        string testGroupId = String.Empty;

        try
        {
            resumeVisibility = "none";
            errorVisibility = "hidden";
            Console.WriteLine("vkToken: '" + 
                              (string.IsNullOrEmpty(accessToken) 
                                  ? String.Empty 
                                  : (accessToken.Substring(0, 20) + "...")) + "'");
            Console.WriteLine($"vkLogin: '{vkLogin}'");
            await JsRuntime.InvokeAsync<string>("console.log", "vkToken: '" + 
                               (string.IsNullOrEmpty(accessToken) 
                                   ? String.Empty 
                                   : (accessToken.Substring(0, 20) + "...")) + "'");
            await JsRuntime.InvokeAsync<string>("console.log", $"vkLogin: '{vkLogin}'");

            var api = new VkApi();

            if (!string.IsNullOrEmpty(accessToken) ||
                (!string.IsNullOrEmpty(vkLogin) && !string.IsNullOrEmpty(vkPassword)))
            {
                // resumeVisibility = "block";
                // resumeValue = "Анализируем профиль. Процесс может занять от нескольких секунд до пары минут...";
                // StateHasChanged();
                // await Task.Delay(1000);
                await JsRuntime.InvokeVoidAsync("alert", 
                    "Анализируем профиль. Процесс может занять от нескольких секунд до пары минут...");

                if (!string.IsNullOrEmpty(accessToken))
                {
                    api.Authorize(new ApiAuthParams
                    {
                        AccessToken = accessToken
                    });
                }
                else
                {
                    if (!string.IsNullOrEmpty(vkCode))
                        api.Authorize(new ApiAuthParams
                        {
                            ApplicationId = 51812270,
                            Login = vkLogin,
                            Password = vkPassword,
                            Settings = Settings.All,
                            TwoFactorAuthorization = () => vkCode
                        });
                    else
                        api.Authorize(new ApiAuthParams
                        {
                            ApplicationId = 51812270,
                            Login = vkLogin,
                            Password = vkPassword,
                            Settings = Settings.All
                        }); 
                }

                var wall = await api.Wall.GetAsync(new WallGetParams()
                {
                    Extended = true, Count = 50
                });
                var groups = await api.Groups.GetAsync(new GroupsGetParams()
                {
                    Count = 50
                });

                List<string> groupsInfoList = new List<string>()
                {"ГРУППЫ, НА КОТОРЫЕ ПОДПИСАН ПОЛЬЗОВАТЕЛЬ:"};

                foreach (var group in wall.Groups)
                {
                    var groupInfo = await api.Groups.GetByIdAsync(null, group.Id.ToString(), GroupsFields.All);
                    var singleGroupInfo = groupInfo.FirstOrDefault();

                    groupsInfoList.Add($"{singleGroupInfo?.Name}. {singleGroupInfo?.Activity}. " +
                                       $"{singleGroupInfo?.Status}. {singleGroupInfo?.Description}");
                }

                var groupsExcept = groups.Where(x => !wall.Groups.Select(wallGr => wallGr.Id).Contains(x.Id)).Select(x => x.Id).ToList();
                foreach (var group in groupsExcept)
                {
                    testGroupId = group.ToString();
                    try
                    {
                        var groupInfo = await api.Groups.GetByIdAsync(null, group.ToString(), GroupsFields.All);
                        var singleGroupInfo = groupInfo.FirstOrDefault();

                        groupsInfoList.Add($"{singleGroupInfo?.Name}. {singleGroupInfo?.Activity}. " +
                                           $"{singleGroupInfo?.Status}. {singleGroupInfo?.Description}");
                    }
                    catch (Exception exGr)
                    {
                        var vv = testGroupId;
                        Console.WriteLine($"Ошибка HandleSubmit(). GroupId={testGroupId} => {exGr.GetType()} => {exGr.Message}");
                        await JsRuntime.InvokeAsync<string>("console.log", 
                            $"Ошибка HandleSubmit(). GroupId={testGroupId} => {exGr.GetType()} => {exGr.Message}");
                    }
                }

                groupsInfoList.Add(Environment.NewLine);
                groupsInfoList.Add("ПОСТЫ ПОЛЬЗОВАТЕЛЯ:");
                foreach (var post in wall.WallPosts.Where(x => !string.IsNullOrEmpty(x.Text)).Take(200))
                {
                    groupsInfoList.Add(post.Text);
                }
                var userInfoAsString = String.Join(Environment.NewLine, groupsInfoList.ToArray());

                var resume = await GetGptResponse(userInfoAsString);
                await JsRuntime.InvokeAsync<string>("console.log", $"Ответ от GetGptResponse() => {resume}");
                if (!string.IsNullOrEmpty(resume))
                {
                    resumeVisibility = "block";
                    resumeValue = resume;

                    accessToken = String.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            var vv = testGroupId;
            resumeVisibility = "none";
            errorVisibility = "visible";
            errorValue = $"Ошибка HandleSubmit() => {ex.GetType()} => {ex.Message}";
            Console.WriteLine($"Ошибка HandleSubmit() => {ex}");
            await JsRuntime.InvokeAsync<string>("console.log", $"Ошибка HandleSubmit() => {ex}");
        }
    }

    private async Task<string> GetGptResponse(string question)
    {
        string? resume = String.Empty;

        try
        {
            // 
            question = question.Replace(Environment.NewLine, " ");
            // Удаляем эмодзи
            question = Regex.Replace(question, @"\p{Cs}", String.Empty);
            // Удаляем мульти-пробелы
            question = Regex.Replace(question, @"\s+", " ");
            // Укорачиваем строку
            if (question.Length >= 7900)
                question = question.Substring(0, 7900);
            await JsRuntime.InvokeAsync<string>("console.log", 
                $"Запрос к GetGptResponse() => {question}");

            // Получаем IAM-токен
            var yandexToken = Environment.GetEnvironmentVariable("YANDEX_TOKEN");

            var options = new RestClientOptions("https://iam.api.cloud.yandex.net")
            {
                MaxTimeout = -1,
            };
            var client = new RestSharp.RestClient(options);
            var request = new RestRequest("/iam/v1/tokens", Method.Post);
            request.AddHeader("Content-Type", "application/json");
            request.RequestFormat = DataFormat.Json;
            request.AddJsonBody(new { yandexPassportOauthToken = yandexToken });
            await JsRuntime.InvokeAsync<string>("console.log",
                $"Токен GetGptResponse() => {yandexToken}");
            RestResponse response = await client.ExecuteAsync(request);

            if (response.StatusCode == HttpStatusCode.OK && !string.IsNullOrEmpty(response.Content))
            {
                var tokenInfo = JsonConvert.DeserializeObject<YandexTokenInfo>(response.Content);

                if (tokenInfo != null)
                {
                    // Запрос GPT
                    var options2 = new RestClientOptions("https://llm.api.cloud.yandex.net")
                        {
                            MaxTimeout = -1,
                        };
                    var client2 = new RestSharp.RestClient(options2);
                    var request2 = new RestRequest("/foundationModels/v1/completion", Method.Post);
                    request2.AddHeader("Content-Type", "application/json");
                    request2.AddHeader("x-folder-id", "$FOLDER_ID");
                    request2.AddHeader("Authorization", $"Bearer {tokenInfo.iamToken}");
                    YandexGptRequest yandexGptRequest = new YandexGptRequest()
                    {
                        modelUri = "gpt://b1g6fd6tod219het00c4/yandexgpt-lite",
                        completionOptions = new CompletionOptions()
                        {
                            stream = false,
                            temperature = 0.6,
                            maxTokens = "2000"
                        },
                        messages = new List<Message>()
                        {
                            new Message()
                            {
                                role = "system",
                                text = "Ниже представлены список групп, на которые подписан пользователи и его посты на стене. Нужно на основе предпочтений пользователя найти профессию, которая ему больше всего подходит"
                            },
                            new Message()
                            {
                                role = "user",
                                text = question
                            }
                        }
                    };
                    
                    string requestJson = JsonConvert.SerializeObject(yandexGptRequest);
                    request2.AddStringBody(requestJson, DataFormat.Json);
                    RestResponse response2 = await client2.ExecuteAsync(request2);

                    if (response2.StatusCode == HttpStatusCode.OK && !string.IsNullOrEmpty(response2.Content))
                    {
                        var yandexGptResponse = JsonConvert.DeserializeObject<YandexGptResponse>(response2.Content);

                        if (yandexGptResponse != null)
                            resume = yandexGptResponse.result.alternatives.FirstOrDefault()?.message.text;
                    }
                    else
                    {
                        resumeVisibility = "none";
                        errorVisibility = "visible";
                        errorValue = $"Ошибка GetGptResponse() => Status2:{response2.StatusCode} => {response2.Content}";
                        Console.WriteLine($"Ошибка GetGptResponse() => Status2:{response2.StatusCode} => {response2.Content}");
                        await JsRuntime.InvokeAsync<string>("console.log", $"Ошибка GetGptResponse() => Status2:{response2.StatusCode} => {response2.Content}");
                    }
                }
            }
            else
            {
                resumeVisibility = "none";
                errorVisibility = "visible";
                errorValue = $"Ошибка GetGptResponse() => Status:{response.StatusCode} => {response.Content}";
                Console.WriteLine($"Ошибка GetGptResponse() => Status:{response.StatusCode} => {response.Content}");
                await JsRuntime.InvokeAsync<string>("console.log", $"Ошибка GetGptResponse() => Status:{response.StatusCode} => {response.Content}");
            }
        }
        catch (Exception ex)
        {
            resumeVisibility = "none";
            errorVisibility = "visible";
            errorValue = $"Ошибка GetGptResponse() => {ex.GetType()} => {ex.Message}";
            Console.WriteLine($"Ошибка GetGptResponse() => {ex}");
            await JsRuntime.InvokeAsync<string>("console.log", $"Ошибка GetGptResponse() => {ex}");
        }

        return resume;
    }

    public class YandexTokenInfo
    {
        public string iamToken { get; set; }
        public DateTime expiresAt { get; set; }
    }

    /// <summary>
    /// ////////////
    /// </summary>

    public class CompletionOptions
    {
        public bool stream { get; set; }
        public double temperature { get; set; }
        public string maxTokens { get; set; }
    }

    public class Message
    {
        public string role { get; set; }
        public string text { get; set; }
    }

    public class YandexGptRequest
    {
        public string modelUri { get; set; }
        public CompletionOptions completionOptions { get; set; }
        public List<Message> messages { get; set; }
    }

    /// <summary>
    /// ////////////
    /// </summary>

    public class Alternative
    {
        public Message message { get; set; }
        public string status { get; set; }
    }

    public class Result
    {
        public List<Alternative> alternatives { get; set; }
        public Usage usage { get; set; }
        public string modelVersion { get; set; }
    }

    public class YandexGptResponse
    {
        public Result result { get; set; }
    }

    public class Usage
    {
        public string inputTextTokens { get; set; }
        public string completionTokens { get; set; }
        public string totalTokens { get; set; }
    }
}
